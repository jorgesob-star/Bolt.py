import streamlit as st
import pandas as pd

# --- Configura√ß√£o da p√°gina ---
st.set_page_config(
    page_title="Comparador de Ganhos TVDE",
    page_icon="üöó",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.title("üöó Comparador de Ganhos TVDE")
st.markdown("""
Compare os ganhos e o custo por km entre usar carro alugado ou pr√≥prio como motorista TVDE.
*Insira os seus dados reais para obter resultados mais precisos.*
""")

# --- Inicializa√ß√£o dos par√¢metros com valores padr√£o ---
if 'params' not in st.session_state:
    st.session_state.params = {
        'show_params': False,
        'rental_cost': 270.0,
        'rental_commission': 6.0,
        'own_insurance': 45.0,
        'own_maintenance': 50.0,
        'own_commission': 12.0,
        'extra_expenses': 0.0,
        'include_extra_expenses': False,
        'calculation_type': None,
        'weekly_earnings': 700.0,
        'weekly_hours': 40.0,
        'fuel_cost': 170.0,
        'weekly_km': 1200.0
    }

# --- Fun√ß√£o para formatar moeda ---
def format_currency(value):
    return f"‚Ç¨{value:,.2f}".replace(',', ' ').replace('.', ',').replace(' ', '.')

# --- Entradas principais ---
st.header("üìä Dados de Entrada")
col1, col2 = st.columns(2)

with col1:
    st.session_state.params['weekly_earnings'] = st.number_input(
        "Ganhos Brutos Semanais (‚Ç¨):",
        min_value=0.0,
        value=st.session_state.params['weekly_earnings'],
        step=50.0,
        format="%.2f"
    )
    st.session_state.params['weekly_hours'] = st.number_input(
        "Horas Trabalhadas por Semana:",
        min_value=0.0,
        value=st.session_state.params['weekly_hours'],
        step=1.0
    )

with col2:
    st.session_state.params['fuel_cost'] = st.number_input(
        "Custo Semanal com Combust√≠vel (‚Ç¨):",
        min_value=0.0,
        value=st.session_state.params['fuel_cost'],
        step=10.0,
        format="%.2f"
    )
    st.session_state.params['weekly_km'] = st.number_input(
        "Quil√≥metros percorridos por semana:",
        min_value=0.0,
        value=st.session_state.params['weekly_km'],
        step=50.0
    )

# --- Despesas extras ---
st.header("üí∏ Despesas Extras (Opcionais)")
extra_col1, extra_col2 = st.columns(2)

with extra_col1:
    st.session_state.params['include_extra_expenses'] = st.checkbox(
        "Incluir despesas extras nos c√°lculos",
        value=st.session_state.params['include_extra_expenses']
    )

with extra_col2:
    if st.session_state.params['include_extra_expenses']:
        st.session_state.params['extra_expenses'] = st.number_input(
            "Valor das Despesas Extras Semanais (‚Ç¨):",
            min_value=0.0,
            value=st.session_state.params['extra_expenses'],
            step=5.0,
            format="%.2f"
        )
    else:
        st.session_state.params['extra_expenses'] = 0.0

# --- Par√¢metros avan√ßados ---
with st.expander("‚öôÔ∏è Par√¢metros Avan√ßados", expanded=st.session_state.params['show_params']):
    st.session_state.params['show_params'] = True
    adv_col1, adv_col2 = st.columns(2)

    with adv_col1:
        st.subheader("Carro Alugado")
        st.session_state.params['rental_cost'] = st.number_input(
            "Custo do Aluguel (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.params['rental_cost'],
            step=10.0,
            format="%.2f"
        )
        st.session_state.params['rental_commission'] = st.number_input(
            "Comiss√£o com Carro Alugado (%):",
            min_value=0.0,
            max_value=30.0,
            value=st.session_state.params['rental_commission'],
            step=0.5,
            format="%.1f"
        )

    with adv_col2:
        st.subheader("Carro Pr√≥prio")
        st.session_state.params['own_insurance'] = st.number_input(
            "Seguro (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.params['own_insurance'],
            step=5.0,
            format="%.2f"
        )
        st.session_state.params['own_maintenance'] = st.number_input(
            "Manuten√ß√£o (‚Ç¨/semana):",
            min_value=0.0,
            value=st.session_state.params['own_maintenance'],
            step=5.0,
            format="%.2f"
        )
        st.session_state.params['own_commission'] = st.number_input(
            "Comiss√£o com Carro Pr√≥prio (%):",
            min_value=0.0,
            max_value=30.0,
            value=st.session_state.params['own_commission'],
            step=0.5,
            format="%.1f"
        )

# --- Bot√µes de c√°lculo ---
st.header("üßÆ Calcular")
calc_col1, calc_col2, calc_col3 = st.columns(3)

with calc_col1:
    if st.button("Calcular Carro Alugado"):
        st.session_state.params['calculation_type'] = "alugado"

with calc_col2:
    if st.button("Calcular Carro Pr√≥prio"):
        st.session_state.params['calculation_type'] = "proprio"

with calc_col3:
    if st.button("Comparar Ambos"):
        st.session_state.params['calculation_type'] = "comparar"

# --- Fun√ß√£o de c√°lculo ---
def calcular_ganhos(params):
    resultados = {}
    weekly_earnings = params['weekly_earnings']
    weekly_hours = params['weekly_hours']
    fuel_cost = params['fuel_cost']
    weekly_km = params['weekly_km']
    extra_expenses = params['extra_expenses'] if params['include_extra_expenses'] else 0

    # C√°lculo para carro alugado
    if params['calculation_type'] in ["alugado", "comparar"]:
        rental_comm = weekly_earnings * (params['rental_commission'] / 100)
        rental_net = weekly_earnings - rental_comm - params['rental_cost'] - fuel_cost - extra_expenses
        custo_km_alugado = (params['rental_cost'] + fuel_cost + rental_comm + extra_expenses) / weekly_km if weekly_km > 0 else 0
        resultados["alugado"] = {
            "bruto": weekly_earnings,
            "l√≠quido": rental_net,
            "hora": rental_net / weekly_hours if weekly_hours > 0 else 0,
            "custo_km": custo_km_alugado,
            "comissao": rental_comm,
            "aluguel": params['rental_cost']
        }

    # C√°lculo para carro pr√≥prio
    if params['calculation_type'] in ["proprio", "comparar"]:
        own_comm = weekly_earnings * (params['own_commission'] / 100)
        own_net = weekly_earnings - own_comm - params['own_insurance'] - params['own_maintenance'] - fuel_cost - extra_expenses
        custo_km_proprio = (params['own_insurance'] + params['own_maintenance'] + fuel_cost + own_comm + extra_expenses) / weekly_km if weekly_km > 0 else 0
        resultados["proprio"] = {
            "bruto": weekly_earnings,
            "l√≠quido": own_net,
            "hora": own_net / weekly_hours if weekly_hours > 0 else 0,
            "custo_km": custo_km_proprio,
            "comissao": own_comm,
            "seguro": params['own_insurance'],
            "manutencao": params['own_maintenance']
        }

    # C√°lculo da diferen√ßa (quando comparar)
    if params['calculation_type'] == "comparar":
        resultados["diferen√ßa"] = {
            "l√≠quido": resultados["alugado"]["l√≠quido"] - resultados["proprio"]["l√≠quido"],
            "hora": resultados["alugado"]["hora"] - resultados["proprio"]["hora"],
            "custo_km": resultados["alugado"]["custo_km"] - resultados["proprio"]["custo_km"]
        }

    return resultados

# --- Executar c√°lculo e exibir resultados ---
if st.session_state.params['calculation_type']:
    resultados = calcular_ganhos(st.session_state.params)
    st.header("üìà Resultados")

    if st.session_state.params['calculation_type'] == "alugado":
        alugado = resultados["alugado"]
        col1, col2, col3 = st.columns(3)
        col1.metric("L√≠quido Semanal", format_currency(alugado['l√≠quido']))
        col2.metric("M√©dia Hor√°ria", format_currency(alugado['hora']))
        col3.metric("Custo por Km", format_currency(alugado['custo_km']))

        st.subheader("Detalhes:")
        st.write(f"- **Ganho Bruto:** {format_currency(alugado['bruto'])}")
        st.write(f"- **Comiss√£o ({st.session_state.params['rental_commission']}%):** {format_currency(alugado['comissao'])}")
        st.write(f"- **Aluguel:** {format_currency(alugado['aluguel'])}")
        st.write(f"- **Combust√≠vel:** {format_currency(st.session_state.params['fuel_cost'])}")
        if st.session_state.params['include_extra_expenses']:
            st.write(f"- **Despesas Extras:** {format_currency(st.session_state.params['extra_expenses'])}")

    elif st.session_state.params['calculation_type'] == "proprio":
        proprio = resultados["proprio"]
        col1, col2, col3 = st.columns(3)
        col1.metric("L√≠quido Semanal", format_currency(proprio['l√≠quido']))
        col2.metric("M√©dia Hor√°ria", format_currency(proprio['hora']))
        col3.metric("Custo por Km", format_currency(proprio['custo_km']))

        st.subheader("Detalhes:")
        st.write(f"- **Ganho Bruto:** {format_currency(proprio['bruto'])}")
        st.write(f"- **Comiss√£o ({st.session_state.params['own_commission']}%):** {format_currency(proprio['comissao'])}")
        st.write(f"- **Seguro:** {format_currency(proprio['seguro'])}")
        st.write(f"- **Manuten√ß√£o:** {format_currency(proprio['manutencao'])}")
        st.write(f"- **Combust√≠vel:** {format_currency(st.session_state.params['fuel_cost'])}")
        if st.session_state.params['include_extra_expenses']:
            st.write(f"- **Despesas Extras:** {format_currency(st.session_state.params['extra_expenses'])}")

    elif st.session_state.params['calculation_type'] == "comparar":
        alugado = resultados["alugado"]
        proprio = resultados["proprio"]
        diferenca = resultados["diferen√ßa"]

        st.subheader("Compara√ß√£o Direta")
        col1, col2, col3 = st.columns(3)
        col1.metric("Alugado - L√≠quido", format_currency(alugado['l√≠quido']))
        col2.metric("Pr√≥prio - L√≠quido", format_currency(proprio['l√≠quido']))
        col3.metric("Diferen√ßa", format_currency(diferenca['l√≠quido']),
                   delta_color="inverse" if diferenca['l√≠quido'] < 0 else "normal")

        col1, col2, col3 = st.columns(3)
        col1.metric("Alugado - ‚Ç¨/h", format_currency(alugado['hora']))
        col2.metric("Pr√≥prio - ‚Ç¨/h", format_currency(proprio['hora']))
        col3.metric("Diferen√ßa - ‚Ç¨/h", format_currency(diferenca['hora']),
                   delta_color="inverse" if diferenca['hora'] < 0 else "normal")

        col1, col2, col3 = st.columns(3)
        col1.metric("Alugado - ‚Ç¨/km", format_currency(alugado['custo_km']))
        col2.metric("Pr√≥prio - ‚Ç¨/km", format_currency(proprio['custo_km']))
        col3.metric("Diferen√ßa - ‚Ç¨/km", format_currency(diferenca['custo_km']),
                   delta_color="inverse" if diferenca['custo_km'] > 0 else "normal")

        # Recomenda√ß√£o baseada nos resultados
        st.subheader("üí° Recomenda√ß√£o:")
        if diferenca['l√≠quido'] > 0:
            st.success("Com os valores atuais, **alugar o carro** parece ser mais vantajoso economicamente.")
            st.write(f"Voc√™ ganharia **{format_currency(diferenca['l√≠quido'])}** a mais por semana com o carro alugado.")
        elif diferenca['l√≠quido'] < 0:
            st.success("Com os valores atuais, **usar carro pr√≥prio** parece ser mais vantajoso economicamente.")
            st.write(f"Voc√™ ganharia **{format_currency(-diferenca['l√≠quido'])}** a mais por semana com o carro pr√≥prio.")
        else:
            st.info("Os dois cen√°rios apresentam resultados financeiros semelhantes.")

# --- Informa√ß√µes adicionais ---
with st.expander("‚ìò Informa√ß√µes e Dicas"):
    st.markdown("""
    ### Como usar este comparador:
    1. Insira seus **ganhos brutos semanais** (o que voc√™ fatura antes de descontar qualquer despesa)
    2. Informe suas **horas trabalhadas** e **quil√≥metros percorridos** por semana
    3. Adicione o **custo com combust√≠vel** (voc√™ pode calcular isso multiplicando os litros consumidos pelo pre√ßo do combust√≠vel)
    4. Nos par√¢metros avan√ßados, ajuste os valores conforme sua realidade (comiss√µes, custos de aluguel, etc.)
    5. Clique nos bot√µes para ver os resultados

    ### O que considerar:
    - **Carro alugado**: Geralmente tem comiss√µes mais baixas, mas voc√™ paga o aluguel
    - **Carro pr√≥prio**: Comiss√µes mais altas, mas voc√™ n√£o paga aluguel (apenas manuten√ß√£o e seguro)
    - **Despesas extras**: Portagens, lavagens, multas, etc. podem ser inclu√≠das para um c√°lculo mais realista
    - **Deprecia√ß√£o**: Se usar carro pr√≥prio, considere a deprecia√ß√£o do ve√≠culo (n√£o inclu√≠da nestes c√°lculos)

    ### Dicas para motoristas TVDE:
    - Mantenha um registro detalhado de todas as suas despesas
    - Considere fazer a declara√ß√£o de IRS como trabalhador independente para deduzir despesas
    - Analise periodicamente se continua compensando usar carro alugado ou pr√≥prio
    """)
